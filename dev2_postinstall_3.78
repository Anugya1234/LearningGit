global class PostInstallScript implements InstallHandler {
    global void onInstall(InstallContext context) {
        
                /*****************INSERT/UPDATE IntelliConnection_ENV object***************/
        List<IntelliConnection_ENV__c> envList =  new List<IntelliConnection_ENV__c>();
        String countEnv = 'Select count() from IntelliConnection_ENV__c ';
        Integer envSize = Database.countQuery(countEnv);
        
        //***FLS 3.65***//
        Set<String> envFields = new Set<String>{'ENV__c','TYPE__c','URL__c','isProd__c'};
            if(envSize==0){
                IntelliConnection_ENV__c env = new IntelliConnection_ENV__c();
                
                env.ENV__c = 'ION-US';
                env.TYPE__c='API';
                env.URL__c='https://api.intelliverse.com';
                env.isProd__c = true;  
                envList.Add(env);
                
                env = new IntelliConnection_ENV__c();
                env.ENV__c = 'ION-US';
                env.TYPE__c='NODE';
                env.URL__c='https://node.intelliverse.com:3002';
                env.isProd__c = true;
                envList.Add(env);
                
                env = new IntelliConnection_ENV__c();
                env.ENV__c = 'ION-US';
                env.TYPE__c='PORTAL';
                env.URL__c='https://voyager.intelliverse.com';
                env.isProd__c = true;
                envList.Add(env);
                
                if (!envList.isEmpty()){
                    //***CRUD 3.65***//
                    if(CrudFlsUtil.checkCRUD_Apex('IntelliConnection_ENV__c', 'Create') && CrudFlsUtil.checkFLS_Apex(envFields,'IntelliConnection_ENV__c', 'Create')){
                        insert envList;
                    }
                    
                } 
                
            }
        
        /*****************INSERT/UPDATE Intelliconnection Settings ***************/
        Map<String, String> settingsMap = new Map<String, String>{'CustomerId' => '103',
            'CustomerName' => 'SABER',
            'CustomerPassword' => 'intelliSaber01',
            'TaskStatusOption' => 'Completed',
            'TreeType' => 'User',
            'ENVOption' => 'ION-US'};
         map<string,ICSetting__c> existingSettings = ICSetting__c.getAll().clone();
        List<ICSetting__c> settingList = new List<ICSetting__c>();
        Set<String> settingFields = new Set<String>{'Name','Value__c'};
        for(String settingKey : settingsMap.keyset()){
            if(existingSettings.containsKey(settingKey)){
                existingSettings.get(settingKey).Value__c = settingsMap.get(settingKey);  
                
            }
            else{
                
                ICSetting__c setting = new ICSetting__c();
                setting.Name = settingKey;
                setting.Value__c = settingsMap.get(settingKey);
                settingList.add(setting);
                
            }
        }
        if(!settingList.isEmpty()){
            //***CRUD 3.65***//
            if(CrudFlsUtil.checkCRUD_Apex('ICSetting__c', 'Create') && CrudFlsUtil.checkFLS_Apex(settingFields, 'ICSetting__c', 'Create') ){
            insert settingList;
        }
            
        }
        
        if(!existingSettings.values().isEmpty())
         update existingSettings.values();
        
        /************INSERT/UPDATE Manager Detail Custom Setting********/  
        
        Map<String, String> managerDetailMap = new Map<String, String>{'BillingId' => '',
            'DeptNo' => '',
            'mailBox' => '',
            'managerLoginID' => '',
            'managerPassword' => '',
            'managerProductID' => '',
            'managerSubID' => ''};
                map<string,Connection__Manager_Info__c> existingmanagerSettings = Connection__Manager_Info__c.getAll().clone();
        List<Connection__Manager_Info__c> managerDetailsList = new List<Connection__Manager_Info__c>();
        Set<String> managerFields = new Set<String>{'Connection__Value__c'};
        for(String managerKey : managerDetailMap.keyset()){
            if(!existingmanagerSettings.containsKey(managerKey)){
                Connection__Manager_Info__c manager = new Connection__Manager_Info__c();
                manager.Name= managerKey;
                manager.Connection__Value__c = managerDetailMap.get(managerKey);
                managerDetailsList.add(manager);   
            }
            
        }           
        if(!managerDetailsList.isEmpty()){
            //***CRUD 3.65***//
            if(CrudFlsUtil.checkCRUD_Apex('Connection__Manager_Info__c', 'Create') && CrudFlsUtil.checkFLS_Apex(managerFields, 'Connection__Manager_Info__c', 'Create') ){
            insert managerDetailsList;
            }
            
        }
        
        
        
        /***********************INSERT/UPDATE Features**********************/
        List<Connection__Default_Features__c> featureList = new List<Connection__Default_Features__c>();
        featureList = [SELECT id,name,Connection__Value__c from Connection__Default_Features__c LIMIT 1]; 
        List<Connection__Default_Features__c> updatedFeatureList = new List<Connection__Default_Features__c>();  
        
        Set<String> featureFields = new Set<String>{'Name','Connection__Value__c'};
        
        Connection__Default_Features__c feature = new Connection__Default_Features__c ();
        feature.name= 'feature';
        feature.Connection__Value__c = 'autorecord,force_localp';       
        
        if(!featureList.isEmpty()){         
            feature.Id = featureList[0].Id;
            //***CRUD 3.65***//
            if(CrudFlsUtil.checkCRUD_Apex('Connection__Default_Features__c', 'Update') && CrudFlsUtil.checkFLS_Apex(featureFields, 'Connection__Default_Features__c', 'Update') ){
            update feature ;
        }
            
        }
        else{
            //***CRUD 3.65***//
            if(CrudFlsUtil.checkCRUD_Apex('Connection__Default_Features__c', 'Update') && CrudFlsUtil.checkFLS_Apex(featureFields, 'Connection__Default_Features__c', 'Update') ){
            insert feature ;
        }
        
        }
        
        /*********************INSERT/UPDATE Product********************/
        List<Connection__Product_Info__c> productList = new List<Connection__Product_Info__c>();
        productList = [SELECT id,name from Connection__Product_Info__c LIMIT 1];
        Set<String> productFields = new Set<String>{'Name','Connection__City__c','Connection__Country__c','Connection__FeatureSetId_ManagerUser__c','Connection__FeatureSetId_SubUser__c','Connection__State__c','Connection__Passcode__c','Connection__Timezone__c'};
        
        Connection__Product_Info__c product = new Connection__Product_Info__c();
        product.Name ='Product';
        product.Connection__City__c = 'atlanta';
        product.Connection__Country__c = 'US';
        product.Connection__FeatureSetId_ManagerUser__c = 'DC9F9F0294BB5A02E04400144F1E5C97 ';
        product.Connection__FeatureSetId_SubUser__c = 'D96196869ACC5657E0440003BA07CDF4';
        product.Connection__State__c = 'GA';
        product.Connection__Passcode__c = '123456';
        product.Connection__Timezone__c = 'EST';           
        if(!productList.isEmpty()){
            product.Id = productList[0].Id;
            //***CRUD 3.65***//
            if(CrudFlsUtil.checkCRUD_Apex('Connection__Product_Info__c', 'Update') && CrudFlsUtil.checkFLS_Apex(productFields, 'Connection__Product_Info__c', 'Update') ){
            update product;  
        }
            
        }
        else{
            if(CrudFlsUtil.checkCRUD_Apex('Connection__Product_Info__c', 'Create') && CrudFlsUtil.checkFLS_Apex(productFields, 'Connection__Product_Info__c', 'Create') ){
            insert product;
        }
            
        }
        

        
    }
}